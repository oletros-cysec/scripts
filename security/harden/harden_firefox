#!/bin/bash
# root: y

grey="\\e[1;90m"
red="\\e[1;91m"
green="\\e[1;92m"
orange="\\e[1;93m"
blue="\\e[1;94m"
purple="\\e[1;95m"
cyan="\\e[1;96m"
white="\\e[1;97m"
end="\\e[0;0m"

dt=`date +%F`

############

need_root() {
	if [ "$UID" != "0" ]; then
		zenity --list --title "Secure Firefox" --text "Root is needed using su. Run this script as root!" 2>/dev/null
		exit 1
	fi
}

need_root

############

fftype=`zenity --list --title "Secure Firefox" --text "What type of FireFox you have?" --radiolist --column "Choice" --column "Options" TRUE "Firefox-ESR" FALSE "Firefox" 2>/dev/null`

if [ "$fftype" == "Firefox-ESR" ]; then
	type="default-esr"
else
	type="default"
fi

############

user=`zenity --entry --title "Secure Firefox" --text "User to used: " 2>/dev/null`
if [ "$user" == "" ]; then
	user="$USER"
fi

userprofile=`find /home/$user/.mozilla/firefox -type d -name "*.$type"`

############

checkbox=`zenity --list --title "Secure Firefox" --text "Choose at least one type of setup" --checklist --column "Choice" --column "Options" TRUE "User mode" TRUE "System mode - Unlocked" FALSE "System mode - Locked" --separator="|" 2>/dev/null`

test=`echo $checkbox | grep "User mode"`
if [ "$test" != "" ]; then
	theoutput="$userprofile/user.js"
else
	usermod=false
fi

test=`echo $checkbox | grep "System mode - Unlocked"`
if [ "$test" != "" ]; then
	if [ "$theoutput" != "" ]; then
		theoutput1="/etc/firefox-esr/systemwide_user.js"
	else
		theoutput="/etc/firefox-esr/systemwide_user.js"
	fi
else
	sysmod=false
fi

test=`echo $checkbox | grep "System mode - Locked"`
if [ "$test" != "" ]; then
	if [ "$theoutput" != "" ]; then
		if [ "$theoutput1" != "" ]; then
			theoutput2="/etc/firefox-esr/locked_user.js"
		else
			theoutput1="/etc/firefox-esr/locked_user.js"
		fi
	else
		theoutput="/etc/firefox-esr/locked_user.js"
	fi
else
	sysnomod=false
fi

if ! ($usermod) && ! ($sysmod) && ! ($sysnomod); then
	zenity --error --title "Secure Firefox" --text "You had to choose!" 2>/dev/null
	exit 1
fi

############

if [ -e "$userprofile/user.js" ]; then
	rm "$userprofile/user.js"
fi

if [ -e /etc/firefox-esr/systemwide_user.js ]; then
	rm /etc/firefox-esr/systemwide_user.js
fi

if [ -e /etc/firefox-esr/locked_user.js ]; then
	rm /etc/firefox-esr/locked_user.js
fi

############

paranoidchoice=`zenity --list --title "Secure Firefox" --text "Enable paranoid mode?" --radiolist --column "Choice" --column "Options" TRUE "Yes" FALSE "No" 2>/dev/null`

if [ "$paranoidchoice" == "Yes" ]; then
	paranoidmode='
user_pref("app.feedback.baseURL", "");
user_pref("app.support.baseURL", "");
user_pref("app.support.e10sAccessibilityUrl", "");
user_pref("app.update.url", "");
user_pref("app.update.url.details", "");
user_pref("browser.aboutHomeSnippets.updateUrl", "");
user_pref("browser.customizemode.tip0.learnMoreUrl", "");
user_pref("browser.dictionaries.download.url", "");
user_pref("browser.geolocation.warning.infoURL", "");
user_pref("browser.safebrowsing.downloads.remote.url", "");
user_pref("browser.safebrowsing.provider.google4.gethashURL", "");
user_pref("browser.safebrowsing.provider.google4.reportURL", "");
user_pref("browser.safebrowsing.provider.google4.updateURL", "");
user_pref("browser.safebrowsing.provider.google.gethashURL", "");
user_pref("browser.safebrowsing.provider.google.reportURL", "");
user_pref("browser.safebrowsing.provider.google.updateURL", "");
user_pref("browser.safebrowsing.provider.mozilla.gethashURL", "");
user_pref("browser.safebrowsing.provider.mozilla.updateURL", "");
user_pref("browser.safebrowsing.reportMalwareMistakeURL", "");
user_pref("browser.safebrowsing.reportPhishMistakeURL", "");
user_pref("browser.safebrowsing.reportPhishURL", "");
user_pref("browser.search.geoip.url", "");
user_pref("browser.search.geoSpecificDefaults.url", "");
user_pref("browser.search.searchEnginesURL", "");
user_pref("browser.selfsupport.url", "");
user_pref("datareporting.healthreport.about.reportUrl", "");
user_pref("datareporting.healthreport.about.reportUrlUnified", "");
user_pref("datareporting.healthreport.documentServerURI", "");
user_pref("datareporting.healthreport.infoURL", "");
user_pref("experiments.manifest.uri", "");
user_pref("extensions.blocklist.detailsURL", "");
user_pref("extensions.blocklist.itemURL", "");
user_pref("extensions.blocklist.url", "");
user_pref("extensions.webservice.discoverURL", "");
user_pref("security.csp.experimentalEnabled", true);
user_pref("security.OCSP.require", true);
user_pref("security.ssl3.dhe_dss_aes_128_sha", false);
user_pref("security.ssl3.dhe_dss_aes_256_sha", false);
user_pref("security.ssl3.dhe_dss_camellia_128_sha", false);
user_pref("security.ssl3.dhe_dss_camellia_256_sha", false);
user_pref("security.ssl3.dhe_dss_des_ede3_sha", false);
user_pref("security.ssl3.dhe_rsa_aes_128_sha", false);
user_pref("security.ssl3.dhe_rsa_aes_256_sha", false);
user_pref("security.ssl3.dhe_rsa_camellia_128_sha", false);
user_pref("security.ssl3.dhe_rsa_camellia_256_sha", false);
user_pref("security.ssl3.dhe_rsa_des_ede3_sha", false);
user_pref("security.ssl3.ecdh_ecdsa_aes_128_sha", false);
user_pref("security.ssl3.ecdh_ecdsa_aes_256_sha", false);
user_pref("security.ssl3.ecdh_ecdsa_des_ede3_sha", false);
user_pref("security.ssl3.ecdh_ecdsa_null_sha", false);
user_pref("security.ssl3.ecdh_ecdsa_rc4_128_sha", false);
user_pref("security.ssl3.ecdhe_ecdsa_aes_128_gcm_sha256", true);
user_pref("security.ssl3.ecdhe_ecdsa_aes_128_sha", false);
user_pref("security.ssl3.ecdhe_ecdsa_aes_256_sha", true);
user_pref("security.ssl3.ecdhe_ecdsa_chacha20_poly1305_sha256", true);
user_pref("security.ssl3.ecdhe_ecdsa_des_ede3_sha", false);
user_pref("security.ssl3.ecdhe_ecdsa_null_sha", false);
user_pref("security.ssl3.ecdhe_ecdsa_rc4_128_sha", false);
user_pref("security.ssl3.ecdhe_rsa_aes_128_gcm_sha256", true);
user_pref("security.ssl3.ecdhe_rsa_aes_128_sha", false);
user_pref("security.ssl3.ecdhe_rsa_aes_256_sha", true);
user_pref("security.ssl3.ecdhe_rsa_chacha20_poly1305_sha256", true);
user_pref("security.ssl3.ecdhe_rsa_des_ede3_sha", false);
user_pref("security.ssl3.ecdhe_rsa_null_sha", false);
user_pref("security.ssl3.ecdhe_rsa_rc4_128_sha", false);
user_pref("security.ssl3.ecdh_rsa_aes_128_sha", false);
user_pref("security.ssl3.ecdh_rsa_aes_256_sha", false);
user_pref("security.ssl3.ecdh_rsa_des_ede3_sha", false);
user_pref("security.ssl3.ecdh_rsa_null_sha", false);
user_pref("security.ssl3.ecdh_rsa_rc4_128_sha", false);
user_pref("security.ssl3.rsa_1024_rc4_56_sha", false);
user_pref("security.ssl3.rsa_aes_128_sha", false);
user_pref("security.ssl3.rsa_aes_256_sha", false);
user_pref("security.ssl3.rsa_camellia_128_sha", false);
user_pref("security.ssl3.rsa_camellia_256_sha", false);
user_pref("security.ssl3.rsa_des_ede3_sha", false);
user_pref("security.ssl3.rsa_fips_des_ede3_sha", false);
user_pref("security.ssl3.rsa_null_md5", false);
user_pref("security.ssl3.rsa_null_sha", false);
user_pref("security.ssl3.rsa_rc2_40_md5", false);
user_pref("security.ssl3.rsa_rc4_128_md5", false);
user_pref("security.ssl3.rsa_rc4_128_sha", false);
user_pref("security.ssl3.rsa_rc4_40_md5", false);
user_pref("security.ssl3.rsa_seed_sha", false);
user_pref("security.tls.unrestricted_rc4_fallback", false);
user_pref("browser.display.use_document_fonts", 0);'
	isparanoidmode=true
else
	paranoidmode=''
	isparanoidmode=false
fi

############

inspectorchoice=`zenity --list --title "Secure Firefox" --text "Enable Inspector advanced features?" --radiolist --column "Choice" --column "Options" TRUE "Yes" FALSE "No" 2>/dev/null`

if [ "$inspectorchoice" == "Yes" ]; then
	inspector='
user_pref("devtools.webide.adaptersAddonURL", "");
user_pref("devtools.webide.adbAddonURL", "");
user_pref("devtools.webide.simulatorAddonsURL", "");
user_pref("devtools.chrome.enabled", true);
user_pref("devtools.debugger.force-local", true);
user_pref("devtools.debugger.remote-enabled", false);
user_pref("devtools.webide.autoinstallADBHelper", false);
user_pref("devtools.webide.autoinstallFxdtAdapters", false);
user_pref("devtools.webide.enabled", false);
user_pref("devtools.webide.simulatorAddonID", "");
user_pref("devtools.whatsnew.enabled", false);
user_pref("devtools.whatsnew.feature-enabled", false);
user_pref("devtools.application.enabled", false);
user_pref("devtools.aboutdebugging.showHiddenAddons", true);
user_pref("devtools.browserconsole.filter.css", true);
user_pref("devtools.browserconsole.filter.debug", true);
user_pref("devtools.browserconsole.filter.error", true);
user_pref("devtools.browserconsole.filter.info", true);
user_pref("devtools.browserconsole.filter.log", true);
user_pref("devtools.browserconsole.filter.net", true);
user_pref("devtools.browserconsole.filter.netxhr", true);
user_pref("devtools.browserconsole.filter.warn", true);
user_pref("devtools.browserconsole.filter.editor", true);
user_pref("devtools.application.enabled", true);
user_pref("devtools.browserconsole.contentMessages", true);
user_pref("devtools.browserconsole.filter.editor", true);
user_pref("devtools.netmonitor.features.serverSentEvents", true);
user_pref("devtools.netmonitor.persistlog", true);
user_pref("devtools.remote.wifi.scan", false);
user_pref("devtools.screenshot.audio.enabled", false);
user_pref("devtools.theme", false);
user_pref("devtools.webconsole.filter.css", true);
user_pref("devtools.webconsole.filter.debug", true);
user_pref("devtools.webconsole.filter.error", true);
user_pref("devtools.webconsole.filter.info", true);
user_pref("devtools.webconsole.filter.log", true);
user_pref("devtools.webconsole.filter.net", true);
user_pref("devtools.webconsole.filter.netxhr", true);
user_pref("devtools.webconsole.filter.warn", true);
user_pref("devtools.webconsole.input.editor", true);
user_pref("devtools.webconsole.persistlog", true);'
	isinspector=true
else
	inspector=''
	isinspector=false
fi

############

if ($isinspector); then
	statusinspector="ON"
else
	statusinspector="OFF"
fi

if ($statusparanoidmode); then
	statusparanoidmode="ON"
else
	statusparanoidmode="OFF"
fi

echo "// Date: $dt | Security Mode: ON | Inspector: $statusinspector | Paranoid Mode: $statusparanoidmode" > "$theoutput"

echo 'user_pref("app.shield.optoutstudies.enabled", false);
user_pref("app.update.auto", true);
user_pref("app.update.enabled", true);
user_pref("beacon.enabled", false);
user_pref("breakpad.reportURL", "");
user_pref("browser.bookmarks.max_backups", 0);
user_pref("browser.cache.disk_cache_ssl", false);
user_pref("browser.cache.disk.capacity", 15000);
user_pref("browser.cache.disk.enable", false);
user_pref("browser.cache.disk.smart_size.enabled", false);
user_pref("browser.cache.disk.smart_size.first_run", false);
user_pref("browser.cache.memory.capacity", 8192);
user_pref("browser.cache.memory.enable", false);
user_pref("browser.cache.offline.capacity", 0);
user_pref("browser.cache.offline.enable", false);
user_pref("browser.casting.enabled", false);
user_pref("browser.crashReports.unsubmittedCheck.enabled", false);
user_pref("browser.download.folderList", 2);
user_pref("browser.download.manager.retention", 0);
user_pref("browser.download.useDownloadDir", true);
user_pref("browser.fixup.alternate.enabled", false);
user_pref("browser.fixup.hide_user_pass", true);
user_pref("browser.formfill.enable", false);
user_pref("browser.formfill.expire_days", 0);
user_pref("browser.helperApps.deleteTempFileOnExit", true);
user_pref("browser.identity.ssl_domain_display", 1);
user_pref("browser.newtabpage.activity-stream.enabled", false);
user_pref("browser.newtabpage.activity-stream.feeds.section.topstories", false);
user_pref("browser.newtabpage.directory.ping", "");
user_pref("browser.newtabpage.directory.source", "");
user_pref("browser.newtabpage.enabled", false);
user_pref("browser.newtabpage.enhanced", false);
user_pref("browser.newtab.preload", false);
user_pref("browser.newtab.url", "about:blank");
user_pref("browser.offline-apps.notify", true);
user_pref("browser.pagethumbnails.capturing_disabled", true);
user_pref("browser.pocket.enabled", false);
user_pref("browser.privatebrowsing.autostart", true);
user_pref("browser.safebrowsing.blockedURIs.enabled", true);
user_pref("browser.safebrowsing.downloads.remote.enabled", false);
user_pref("browser.safebrowsing.enabled", true);
user_pref("browser.safebrowsing.malware.enabled", true);
user_pref("browser.safebrowsing.phishing.enabled", true);
user_pref("browser.search.countryCode", "US");
user_pref("browser.search.region", "US");
user_pref("browser.search.suggest.enabled", false);
user_pref("browser.search.update", false);
user_pref("browser.send_pings", false);
user_pref("browser.send_pings.require_same_host", false);
user_pref("browser.sessionstore.privacy_level", 2);
user_pref("browser.sessionstore.resume_from_crash", false);
user_pref("browser.sessionstore.upgradeBackup.latestBuildID", "");
user_pref("browser.shell.checkDefaultBrowser", false);
user_pref("browser.shell.shortcutFavicons", false);
user_pref("browser.ssl_override_behavior", 1);
user_pref("browser.startup.homepage", "https://www.whatismyip.com/|https://www.dnsleaktest.com/");
user_pref("browser.startup.homepage_override.buildID", "");
user_pref("browser.tabs.crashReporting.sendReport", false);
user_pref("browser.uitour.enabled", false);
user_pref("browser.urlbar.autocomplete.enabled", false);
user_pref("browser.urlbar.autoFill", false);
user_pref("browser.urlbar.autoFill.typed", false);
user_pref("browser.urlbar.filter.javascript", true);
user_pref("browser.urlbar.suggest.history", false);
user_pref("browser.urlbar.suggest.searches", false);
user_pref("browser.urlbar.suggest.topsites", false);
user_pref("browser.urlbar.trimURL", false);
user_pref("browser.urlbar.trimURLs", false);
user_pref("camera.control.face_detection.enabled", false);
user_pref("canvas.capturestream.enabled", false);
user_pref("canvas.filters.enabled", false);
user_pref("canvas.focusring.enabled", false);
user_pref("canvas.path.enabled", false);
user_pref("capability.policy.maonoscript.sites", "addons.mozilla.org about: about:addons about:blank about:blocked about:certerror about:config about:crashes about:home about:memory about:neterror about:plugins about:pocket-saved about:pocket-signup about:preferences about:privatebrowsing about:sessionrestore about:srcdoc about:support blob: chrome: mediasource: moz-extension: moz-safe-about: resource:");
user_pref("clipboard.autocopy", false);
user_pref("datareporting.healthreport.service.enabled", false);
user_pref("datareporting.healthreport.service.firstRun", false);
user_pref("datareporting.healthreport.uploadEnabled", false);
user_pref("datareporting.policy.dataSubmissionEnabled", false);
user_pref("device.sensors.enabled", false);
user_pref("dom.allow_cut_copy", false);
user_pref("dom.archivereader.enabled", false);
user_pref("dom.battery.enabled", false);
user_pref("dom.disable_beforeunload", true);
user_pref("dom.disable_window_open_feature.menubar", true);
user_pref("dom.disable_window_open_feature.personalbar", true);
user_pref("dom.disable_window_open_feature.scrollbars", true);
user_pref("dom.disable_window_open_feature.toolbar", true);
user_pref("dom.enable_performance", false);
user_pref("dom.enable_resource_timing", false);
user_pref("dom.enable_user_timing", false);
user_pref("dom.event.contextmenu.enabled", false);
user_pref("dom.flyweb.enabled", false);
user_pref("dom.gamepad.enabled", false);
user_pref("dom.indexedDB.enabled", false);
user_pref("dom.ipc.plugins.flash.subprocess.crashreporter.enabled", false);
user_pref("dom.ipc.plugins.reportCrashURL", false);
user_pref("dom.maxHardwareConcurrency", 2);
user_pref("dom.mozTCPSocket.enabled", false);
user_pref("dom.netinfo.enabled", false);
user_pref("dom.network.enabled", false);
user_pref("dom.push.connection.enabled", false);
user_pref("dom.serviceWorkers.enabled", false);
user_pref("dom.telephony.enabled", false);
user_pref("dom.vibrator.enabled", false);
user_pref("dom.vr.enabled", false);
user_pref("dom.vr.oculus.enabled", false);
user_pref("dom.webaudio.enabled", false);
user_pref("dom.webnotifications.enabled", false);
user_pref("dom.workers.enabled", false);
user_pref("experiments.enabled", false);
user_pref("experiments.supported", false);
user_pref("extensions.blocklist.enabled", false);
user_pref("extensions.getAddons.cache.enabled", false);
user_pref("extensions.pocket.api", "");
user_pref("extensions.pocket.enabled", false);
user_pref("extensions.pocket.oAuthConsumerKey", "");
user_pref("extensions.pocket.site", "");
user_pref("extensions.shield-recipe-client.enabled", false);
user_pref("extensions.update.enabled", true);
user_pref("general.appname.override", "Netscape");
user_pref("general.appversion.override", "5.0 (Windows)");
user_pref("general.buildID.override", "20100101");
user_pref("general.oscpu.override", "Windows NT 6.1");
user_pref("general.platform.override", "Win32");
user_pref("general.productSub.override", "20100101");
user_pref("general.useragent.override", "Mozilla/5.0 (Windows NT 10.0; rv:91.0) Gecko/20100101 Firefox/91.0");
user_pref("general.useragent.vendor", "");
user_pref("general.useragent.vendorSub", "");
user_pref("geo.enabled", false);
user_pref("geo.wifi.logging.enabled", false);
user_pref("geo.wifi.uri", "");
user_pref("intl.accept_languages", "en-US,en;q=0.5");
user_pref("intl.locale.matchOS", false);
user_pref("javascript.options.asmjs", false);
user_pref("javascript.options.mem.max", 256);
user_pref("javascript.use_us_english_locale", true);
user_pref("layout.css.visited_links_enabled", false);
user_pref("lightweightThemes.getMoreURL", "");
user_pref("lightweightThemes.recommendedThemes", "");
user_pref("lightweightThemes.update.enabled", false);
user_pref("loop.enabled", false);
user_pref("loop.logDomains", false);
user_pref("media.getusermedia.audiocapture.enabled", false);
user_pref("media.getusermedia.screensharing.allowed_domains", "");
user_pref("media.getusermedia.screensharing.enabled", false);
user_pref("media.gmp-gmpopenh264.enabled", false);
user_pref("media.gmp-manager.buildID", "");
user_pref("media.gmp-manager.url", "");
user_pref("media.gmp-manager.url.override", "data:text/plain");
user_pref("media.gmp-provider.enabled", false);
user_pref("media.navigator.enabled", false);
user_pref("media.navigator.permission.disabled", true);
user_pref("media.navigator.video.enabled", false);
user_pref("media.peerconnection.dtmf.enabled", false);
user_pref("media.peerconnection.enabled", false);
user_pref("media.peerconnection.ice.default_address_only", true);
user_pref("media.peerconnection.ice.no_host", true);
user_pref("media.peerconnection.identity.enabled", false);
user_pref("media.peerconnection.simulcast", false);
user_pref("media.peerconnection.turn.disable", true);
user_pref("media.peerconnection.use_document_iceservers", false);
user_pref("media.peerconnection.video.enabled", false);
user_pref("media.peerconnection.video.vp9_enabled", false);
user_pref("media.video_stats.enabled", false);
user_pref("media.webrtc.debug.log_file", "");
user_pref("media.webspeech.recognition.enable", false);
user_pref("media.webspeech.synth.enabled", false);
user_pref("network.allow-experiments", false);
user_pref("network.captive-portal-service.enabled", false);
user_pref("network.cookie.cookieBehavior", 3);
user_pref("network.cookie.lifetimePolicy", 2);
user_pref("network.cookie.thirdparty.sessionOnly", true);
user_pref("network.dns.blockDotOnion", true);
user_pref("network.dns.disableIPv6", true);
user_pref("network.dns.disablePrefetchFromHTTPS", true);
user_pref("network.dns.disablePrefetch", true);
user_pref("network.http.accept.default", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
user_pref("network.http.accept-encoding", "gzip, deflate, br");
user_pref("network.http.keep-alive.timeout", "15");
user_pref("network.http.referer.spoofSource", true);
user_pref("network.http.referer.XOriginPolicy", 2);
user_pref("network.http.sendRefererHeader", 1);
user_pref("network.http.sendSecureXSiteReferrer", false);
user_pref("network.http.spdy.enabled", false);
user_pref("network.http.speculative-parallel-limit", 0);
user_pref("network.IDN_show_punycode", true);
user_pref("network.jar.open-unsafe-types", false);
user_pref("network.manage-offline-status", false);
user_pref("network.negotiate-auth.allow-insecure-ntlm-v1", false);
user_pref("network.negotiate-auth.allow-insecure-ntlm-v1-https", false);
user_pref("network.predictor.enabled", false);
user_pref("network.prefetch-next", false);
user_pref("network.protocol-handler.expose.about", true);
user_pref("network.protocol-handler.expose-all", false);
user_pref("network.protocol-handler.expose.blob", true);
user_pref("network.protocol-handler.expose.chrome", true);
user_pref("network.protocol-handler.expose.data", true);
user_pref("network.protocol-handler.expose.file", true);
user_pref("network.protocol-handler.expose.ftp", true);
user_pref("network.protocol-handler.expose.https", true);
user_pref("network.protocol-handler.expose.http", true);
user_pref("network.protocol-handler.expose.javascript", true);
user_pref("network.protocol-handler.expose.moz-extension", true);
user_pref("network.protocol-handler.external.about", false);
user_pref("network.protocol-handler.external.blob", false);
user_pref("network.protocol-handler.external.chrome", false);
user_pref("network.protocol-handler.external.data", false);
user_pref("network.protocol-handler.external.file", false);
user_pref("network.protocol-handler.external.ftp", false);
user_pref("network.protocol-handler.external.http", false);
user_pref("network.protocol-handler.external.https", false);
user_pref("network.protocol-handler.external.javascript", false);
user_pref("network.protocol-handler.external.moz-extension", false);
user_pref("network.protocol-handler.warn-external-default", true);
user_pref("network.proxy.socks_remote_dns", true);
user_pref("network.stricttransportsecurity.preloadlist", true);
user_pref("pdfjs.disabled", true);
user_pref("pdfjs.enableWebGL", false);
user_pref("places.history.enabled", false);
user_pref("plugins.click_to_play", true);
user_pref("plugin.state.flash", 0);
user_pref("plugin.state.java", 0);
user_pref("plugin.state.libgnome-shell-browser-plugin", 0);
user_pref("plugins.update.notifyUser", true);
user_pref("privacy.clearOnShutdown.cache", true);
user_pref("privacy.clearOnShutdown.cookies", true);
user_pref("privacy.clearOnShutdown.downloads", true);
user_pref("privacy.clearOnShutdown.formdata", true);
user_pref("privacy.clearOnShutdown.history", true);
user_pref("privacy.clearOnShutdown.offlineApps", true);
user_pref("privacy.clearOnShutdown.openWindows", true);
user_pref("privacy.clearOnShutdown.sessions", true);
user_pref("privacy.cpd.siteSettings", true);
user_pref("privacy.cpd.cache", true);
user_pref("privacy.cpd.cookies", true);
user_pref("privacy.cpd.downloads", true);
user_pref("privacy.cpd.formdata", true);
user_pref("privacy.cpd.history", true);
user_pref("privacy.cpd.offlineApps", true);
user_pref("privacy.cpd.openWindows", true);
user_pref("privacy.cpd.passwords", true);
user_pref("privacy.cpd.sessions", true);
user_pref("privacy.donottrackheader.enabled", true);
user_pref("privacy.firstparty.isolate", true);
user_pref("privacy.resistFingerprinting", true);
user_pref("privacy.sanitize.sanitizeOnShutdown", true);
user_pref("privacy.sanitize.timeSpan", 0);
user_pref("privacy.trackingprotection.enabled", true);
user_pref("privacy.trackingprotection.introURL", "");
user_pref("privacy.trackingprotection.pbmode.enabled", true);
user_pref("privacy.userContext.enabled", true);
user_pref("security.ask_for_password", 2);
user_pref("security.cert_pinning.enforcement_level", 2);
user_pref("security.csp.enable", true);
user_pref("security.dialog_enable_delay", 1000);
user_pref("security.enable_tls_session_tickets", false);
user_pref("security.fileuri.strict_origin_policy", true);
user_pref("security.insecure_field_warning.contextual.enabled", true);
user_pref("security.insecure_password.ui.enabled", true);
user_pref("security.mixed_content.block_active_content", true);
user_pref("security.mixed_content.block_display_content", true);
user_pref("security.OCSP.enabled", 1);
user_pref("security.password_lifetime", 1);
user_pref("security.pki.sha1_enforcement_level", 1);
user_pref("security.sri.enable", true);
user_pref("security.ssl.disable_session_identifiers", true);
user_pref("security.ssl.enable_false_start", true);
user_pref("security.ssl.enable_ocsp_must_staple", true);
user_pref("security.ssl.enable_ocsp_stapling", true);
user_pref("security.ssl.errorReporting.automatic", false);
user_pref("security.ssl.errorReporting.enabled", false);
user_pref("security.ssl.errorReporting.url", "");
user_pref("security.ssl.require_safe_negotiation", true);
user_pref("security.ssl.treat_unsafe_negotiation_as_broken", true);
user_pref("security.tls.version.fallback-limit", 3);
user_pref("security.tls.version.max", 4);
user_pref("security.tls.version.min", 1);
user_pref("security.xpconnect.plugin.unrestricted", false);
user_pref("services.blocklist.update_enabled", true);
user_pref("shumway.disabled", true);
user_pref("signon.autofillForms", false);
user_pref("signon.autofillForms.http", false);
user_pref("signon.formlessCapture.enabled", false);
user_pref("signon.rememberSignons", false);
user_pref("signon.storeWhenAutocompleteOff", false);
user_pref("social.whitelist", "");
user_pref("startup.homepage_welcome_url", "");
user_pref("startup.homepage_welcome_url.additional", "");
user_pref("toolkit.telemetry.archive.enabled", false);
user_pref("toolkit.telemetry.cachedClientID", "");
user_pref("toolkit.telemetry.enabled", false);
user_pref("toolkit.telemetry.infoURL", "");
user_pref("toolkit.telemetry.previousBuildID", "");
user_pref("toolkit.telemetry.server", "");
user_pref("toolkit.telemetry.unified", false);
user_pref("webchannel.allowObject.urlWhitelist", "");
user_pref("webgl.disable-angle", true);
user_pref("webgl.disable-DOM-blit-uploads", true);
user_pref("webgl.disabled", true);
user_pref("webgl.disable-extensions", true);
user_pref("webgl.disable-fail-if-major-performance-caveat", true);
user_pref("webgl.disable-wgl", true);
user_pref("webgl.enable-debug-renderer-info", false);
user_pref("webgl.enable-webgl2", false);
user_pref("webgl.min_capability_mode", true);
user_pref("xpinstall.signatures.required", true);'"$inspector""$paranoidmode" >> "$theoutput"

############

if [ -e /tmp/output1.js ]; then
	rm /tmp/output1.js
fi

if [ -e /tmp/output2.js ]; then
	rm /tmp/output2.js
fi

if [ "$theoutput1" != "" ]; then
	if [ "$theoutput1" == "/etc/firefox-esr/systemwide_user.js" ]; then
		cp "$theoutput" /tmp/output1.js
		cat /tmp/output1.js | sed 's/user_pref/pref/g' > /etc/firefox-esr/systemwide_user.js
	else
		cp "$theoutput" /tmp/output1.js
		cat /tmp/output1.js | sed 's/user_pref/lockPref/g' > /etc/firefox-esr/locked_user.js
	fi
	rm /tmp/output1.js
fi

if [ "$theoutput2" != "" ]; then
	cp "$theoutput" /tmp/output2.js
	cat /tmp/output2.js | sed 's/user_pref/lockPref/g' > /etc/firefox-esr/locked_user.js
	rm /tmp/output2.js
fi

############

if [ -e /etc/firefox-esr/systemwide_user.js ]; then
	chown root:root /etc/firefox-esr/systemwide_user.js
fi

if [ -e /etc/firefox-esr/locked_user.js ]; then
	chown root:root /etc/firefox-esr/locked_user.js
fi

if [ -e "$userprofile/user.js" ]; then
	chown $user:$user "$userprofile/user.js"
fi

############

zenity --info --title "Secure Firefox" --text "Done" 2>/dev/null
exit 0
